在JSX裡面，所有的結構與語法都要被包在標籤裡面，舉例： <> 和 </> 之間、<span></span>之間

function name(){
    reutrn (
        <>
            <h1>123</h1>
        </>
    )
}

等於

function name(){
    reutrn (
        <React.Fragment>
            <h1>123</h1>
        </React.Fragment>
    )
}

<React.Fragment></React.Fragment>
這個外標籤需要 import React from react 後才能使用

上下兩者都不會產生多餘的div，也不會影響到CSS的樣式跟效能，所以多加也沒關係

---------------------------------------------------

const imgTag = <img src="123.jpg" />
const inputTag = <input type="text" name="title" />
const brTag = <br />
const hrTag = <hr />

上面四個屬於自我封閉，自我封閉是XHTML的標準
(自我封閉要查)

圖片都放在public/images，這樣就不用import

---------------------------------------------------
在JSX裡面：

自訂元件標記：一定要英文大寫開頭

內建元件標記：一定要英文小寫開頭

普通的html，英文大小寫並沒有任何差別

---------------------------------------------------

元件加入事件，on開頭的屬性，衣錠是一個函式，相當於addEventListener

---------------------------------------------------

要將某個 JSX 語法註解，必須用 {/**/} 將內容物包起來，
在vscode 按 ctrl + / 就可以註解了

東西之間要空隔，就要用 {''} ，但是只能空一隔

---------------------------------------------------

class 在 react 要用 className 代替，寫法就跟一般html一樣
for 要用 htmlFor 代替，寫法就跟一般html一樣，表單比較常見

上面兩個不改一樣可以運作，但是會跳警告

(無障礙網頁，可以幫助提升SEO   無障礙網頁??? 要查)

行內的 style 元素需要用{}包起來

href="#" 要改成 href="#/"

---------------------------------------------------

function name(){
    return (
        {1}
        {'abc'}
        可以正常呈現

        {true}
        {false}
        {null}
        {undefined}
        上面四個都不會顯示

        {[1, 2, 3, 4]}
        呈現方式會像是[1, 2, 3, 4].join()，只留下字串 1234，但是在網頁裡看到的會是
        "1"
        "2"
        "3"
        "4"

        {{a:1, b:2}}
        純物件會讓程式產生錯誤，需要調整成陣列或是其他形式

        {() => {
            console.log(1)
        }}
        純函式也不會顯示

         {(() => {
            console.log(1)
        })()}
        立即執行函式，比較少見
    )
}

---------------------------------------------------

const student =[
    {id:1, name:emma},
    {id:2, name:ma},
    {id:3, name:ella},

]

function App() {
    return(
        <>
            {
                <ul>
                    {student.map((student, i)=>{
                        return <li key={i}>{student.name}</li>

                        以流水號來當作ID是不錯的作法，也可以用函式庫生產，例如：UUID、moment(如果是個人使用的，才會比較適合)
                    })}
                </ul>
                <ul>
                    {[<li key="0">emma</li>, <li key="1">ma</li>, <li key="2">ella</li>]}
                </ul>

                上面兩行是一樣的結果
            }
        </>
    )
}

用key就可以分辨每個項目

using index as a key is an anti-pattern in react

---------------------------------------------------

在react沒辦法直接使用 if else ，不被react接受
只能用三元運算

function App() {
    const count = 0
    const foo = true
    return(
        <>
            
            {/*if...簡寫法*/}
            {/*&&前面的要轉為布林值(一般情況下)*/}
            {/*只能在JSX與法理寫*/}
            
            {!!count && `目前總數為${count}`}
            {count > 0 && `目前總數為${count}`}

            {/*if...else*/}
            {(foo) ? console.log(1) : console.log(2)}
        </>
    )
}